{"version":3,"sources":["SortingVisualizer/SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","ength","quickSortHelper","pivotIdx","leftIdx","rightIdx","swap","getHeapSortAnimations","currentIdx","siftDown","buildMaxHeap","heap","childOneIdx","childTwoIdx","idxToSwap","temp","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","Sped","document","getElementById","value","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","speeed","b1","b2","barOneHeight","barTwoHeight","cur","isSorted","counter","getBubbleSortAnimations","className","onClick","id","type","step","defaultValue","mergeSort","heapSort","bubbleSort","quickSort","map","idx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b48eb796.chunk.js","sourcesContent":["/* All sorting algorithms */\r\n\r\n/* Pushing values onto animations[] to change the color of \r\n/* the values within the array that are being either compared or swapped */\r\n\r\n\r\n//\r\n/* Merge Sort */\r\n//\r\nexport function getMergeSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper( mainArray, startIdx, endIdx, auxiliaryArray, animations){\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge (mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx){\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if(auxiliaryArray[i] <= auxiliaryArray[j]){\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        }\r\n        else{\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx){\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx){\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n//\r\n/* End Merge Sort */\r\n//\r\n\r\n\r\n//\r\n/* Bubble Sort */\r\n//\r\nexport function getBubbleSortAnimations(array){\r\n\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted){\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; ++i){\r\n            if (array[i] > array[i + 1]){\r\n                animations.push([i, i+1]);\r\n                animations.push([i, i+1]);\r\n                animations.push([array[i], array[i+1]]);\r\n                swap(i, i+1, array);\r\n                isSorted = false;\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n//\r\n/* End Bubble Sort */\r\n//\r\n\r\n\r\n//\r\n/* Quick Sort */\r\n//\r\nexport function getQuickSortAnimations(array){\r\n    const animations = [];\r\n    if (array.ength <= 1) return array;\r\n\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, startIdx, endIdx, animations){\r\n    if (startIdx >= endIdx) return;\r\n    const pivotIdx = startIdx;\r\n    let leftIdx = startIdx + 1;\r\n    let rightIdx = endIdx;\r\n    while (rightIdx >= leftIdx){\r\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]){\r\n            animations.push([leftIdx, rightIdx]);\r\n            animations.push([leftIdx, rightIdx]);\r\n            animations.push([array[leftIdx], array[rightIdx]]);\r\n            swap(leftIdx, rightIdx, array);\r\n        }\r\n        if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\r\n        if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\r\n    }\r\n    animations.push([pivotIdx, rightIdx]);\r\n    animations.push([pivotIdx, rightIdx]);\r\n    animations.push([array[pivotIdx], array[rightIdx]]);\r\n    swap(pivotIdx, rightIdx, array);\r\n    const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\r\n    if(leftSubarrayIsSmaller){\r\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n    }\r\n    else{\r\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\r\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\r\n    }\r\n}\r\n//\r\n/* End Quick Sort */\r\n//\r\n\r\n\r\n//\r\n/* Heap Sort */\r\n//\r\nexport function getHeapSortAnimations(array){\r\n    const animations = [];\r\n    buildMaxHeap(array, animations);\r\n    for (let endIdx = array.length - 1; endIdx > 0; endIdx--){\r\n        animations.push([0, endIdx]);\r\n        animations.push([0, endIdx]);\r\n        animations.push([array[0], array[endIdx]]);\r\n        swap(0, endIdx, array);\r\n        siftDown(0, endIdx - 1, array, animations);\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction buildMaxHeap(array, animations){\r\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--){\r\n        siftDown(currentIdx, array.length - 1, array, animations);\r\n    }\r\n}\r\n\r\nfunction siftDown(currentIdx, endIdx, heap, animations){\r\n    let childOneIdx = currentIdx * 2 + 1;\r\n    while (childOneIdx <= endIdx){\r\n        const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\r\n        let idxToSwap;\r\n        if(childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]){\r\n            idxToSwap = childTwoIdx;\r\n        }\r\n        else{\r\n            idxToSwap = childOneIdx;\r\n        }\r\n\r\n        if (heap[idxToSwap] > heap[currentIdx]){\r\n            animations.push([idxToSwap, currentIdx]);\r\n            animations.push([idxToSwap, currentIdx]);\r\n            animations.push([heap[idxToSwap], heap[currentIdx]]);\r\n            swap(currentIdx, idxToSwap, heap);\r\n            currentIdx = idxToSwap;\r\n            childOneIdx = currentIdx * 2 + 1;\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n}\r\n//\r\n/* End Heap Sort */\r\n//\r\n\r\n\r\n/* Swap used for various sorting algorithms */\r\nfunction swap(i, j, array){\r\n    const temp = array[j];\r\n    array[j] = array[i];\r\n    array[i] = temp;\r\n}","import React from 'react';\r\nimport {getMergeSortAnimations} from './SortingAlgorithms/sortingAlgorithms.js';\r\nimport {getBubbleSortAnimations} from './SortingAlgorithms/sortingAlgorithms.js';\r\nimport {getQuickSortAnimations} from './SortingAlgorithms/sortingAlgorithms.js';\r\nimport {getHeapSortAnimations} from './SortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\nconst NUM_OF_BARS = 130;\r\n\r\nconst PRIMARY_BAR_COLOR = '#DA0049';\r\n\r\nconst SECONDARY_BAR_COLOR = '#FFFFFF';\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUM_OF_BARS; ++i){\r\n            array.push(randomIntFromInterval(5, 550));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {\r\n        var cur = document.getElementById(\"range-speed\");\r\n        var Sped = cur.value;\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i <animations.length; ++i){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_BAR_COLOR : PRIMARY_BAR_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * Sped);\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * Sped);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        var cur = document.getElementById(\"range-speed\");\r\n        var speeed = cur.value;\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        let b1 = 0;\r\n        let b2 = 0;\r\n        for (let i = 0; i < animations.length; ++i){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i%3 !== 2;\r\n            if (isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                b1 = barOneIdx;\r\n                b2 = barTwoIdx;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_BAR_COLOR : PRIMARY_BAR_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * speeed);\r\n            }\r\n            else{\r\n                const [barOneHeight, barTwoHeight] = animations[i];\r\n                const barOneStyle = arrayBars[b1].style;\r\n                const barTwoStyle = arrayBars[b2].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${barTwoHeight}px`;\r\n                    barTwoStyle.height = `${barOneHeight}px`;\r\n                }, i * speeed);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n        var cur = document.getElementById(\"range-speed\");\r\n        var speeed = cur.value;\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        let b1 = 0;\r\n        let b2 = 0;\r\n        for (let i = 0; i < animations.length; ++i){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i%3 !== 2;\r\n            if (isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                b1 = barOneIdx;\r\n                b2 = barTwoIdx;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_BAR_COLOR : PRIMARY_BAR_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * speeed);\r\n            }\r\n            else{\r\n                const [barOneHeight, barTwoHeight] = animations[i];\r\n                const barOneStyle = arrayBars[b1].style;\r\n                const barTwoStyle = arrayBars[b2].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${barTwoHeight}px`;\r\n                    barTwoStyle.height = `${barOneHeight}px`;\r\n                }, i * speeed);\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        var SPEEDI = document.getElementById(\"range-speed\");\r\n        var cur = SPEEDI.value;\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        let b1 = 0;\r\n        let b2 = 0;\r\n        for (let i = 0; i < animations.length; ++i){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i%3 !== 2;\r\n            if (isColorChange){\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                b1 = barOneIdx;\r\n                b2 = barTwoIdx;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_BAR_COLOR : PRIMARY_BAR_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * cur);\r\n            }\r\n            else{\r\n                const [barOneHeight, barTwoHeight] = animations[i];\r\n                const barOneStyle = arrayBars[b1].style;\r\n                const barTwoStyle = arrayBars[b2].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.height = `${barTwoHeight}px`;\r\n                    barTwoStyle.height = `${barOneHeight}px`;\r\n                }, i * cur);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <body className=\"full-page\">\r\n                <div className=\"button-container\">\r\n                    <button className=\"button1\" onClick={() => this.resetArray()}>New Array</button>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                <div className=\"button2\">Speed:</div>\r\n                <div className=\"slider\">\r\n                    <input id=\"range-speed\" className=\"range-slider\" type=\"range\" min=\".1\" max=\"10\" step=\".1\" defaultValue=\"3\"></input>\r\n                </div>\r\n                </div>\r\n                <div className=\"buttons-container\">\r\n                    <div className=\"button-container\">\r\n                        <button className=\"button1\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                        <button className=\"button1\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                        <button className=\"button1\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    </div>\r\n                    <div className=\"button-container\">\r\n                        <button className=\"button1\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    </div>                    \r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div \r\n                            className=\"array-bar\" \r\n                            key={idx}\r\n                            style={{height: `${value}px`}}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </body>\r\n        );\r\n    }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}